//Dependencies and variables
const FILES_TO_CACHE = [
    "/",
    "index.html",
    "/db.js",
    "/index.js",
    "/styles.css",
    //Cache bundles generated by Webpack
    "./dist/bundle.js",
    "./dist/manifest.webmanifest",
    //Cahce Bootstrap and icons 
    "https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css",
    "./icons/icon-192x192.png",
    "./icons/icon-512x512.png",
];

const STATIC_CACHE = "static-cache-v1";
const RUNTIME_CACHE = "runtime-cache";

self.addEventListener("install", (event) => {
    event.waitUntil(
        caches
            .open(STATIC_CACHE)
            .then(cache => cache.addAll(FILES_TO_CACHE))
            .then(self.skipWaiting())
    );
});

//Activate handler that helps clean up old caches
self.addEventListener('activate', (event) => {
    const currentCaches = [STATIC_CACHE, RUNTIME_CACHE];
    event.waitUntil(
      caches
        .keys()
        .then((cacheNames) => {
          return cacheNames.filter((cacheName) => !currentCaches.includes(cacheName));
        })
        .then((cachesToDelete) => {
          return Promise.all(
            cachesToDelete.map((cacheToDelete) => {
              return caches.delete(cacheToDelete);
            })
          );
        })
        .then(() => self.clients.claim())
    );
  });

self.addEventListener("fetch", (event) => {
    if (event.request.url.includes("/api/")) {
        event.respondWith(
            caches
                .open(RUNTIME_CACHE)
                .then((cache) => {
                    return fetch(event.request)
                        .then((response) => {
                            if (response.status === 200) {
                                cache.put(event.request.url, response.clone());
                            }
                            return response;
                        })
                        .catch((err) => {
                            //Network request failed, try to get it from cache
                            return cache.match(event.request);
                        });
                    })
                    .catch((err) => console.log(err))
        );

        return;
    } 
    event.respondWith(
        fetch(event.request).catch(function () {
          return caches.match(event.request).then(function (response) {
            if (response) {
              return response;
            } else if (event.request.headers.get("accept").includes("text/html")) {
              // return the cached home page for all requests for html pages
              return caches.match("/");
            }
          })
        })
      )
    });            